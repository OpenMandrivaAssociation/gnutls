diff -up gnutls-3.6.13/gl/intprops.h.3~ gnutls-3.6.13/gl/intprops.h
--- gnutls-3.6.13/gl/intprops.h.3~	2020-05-02 19:29:38.644954190 +0200
+++ gnutls-3.6.13/gl/intprops.h	2020-05-02 19:34:02.497450929 +0200
@@ -240,7 +240,7 @@
 
 /* True if __builtin_add_overflow_p (A, B, C) works, and similarly for
    __builtin_mul_overflow_p and __builtin_mul_overflow_p.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
+#define _GL_HAS_BUILTIN_OVERFLOW_P ((7 <= __GNUC__) && !defined(__clang__))
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
diff -up gnutls-3.6.13/lib/gnutls_int.h.3~ gnutls-3.6.13/lib/gnutls_int.h
--- gnutls-3.6.13/lib/gnutls_int.h.3~	2020-03-30 00:01:32.000000000 +0200
+++ gnutls-3.6.13/lib/gnutls_int.h	2020-05-02 19:29:38.644954190 +0200
@@ -90,7 +90,7 @@ typedef int ssize_t;
 # define attr_warn_unused_result
 #endif
 
-#if _GNUTLS_GCC_VERSION >= 70100
+#if _GNUTLS_GCC_VERSION >= 70100 && !defined(__clang__)
 # define FALLTHROUGH __attribute__ ((fallthrough))
 #else
 # define FALLTHROUGH
diff -up gnutls-3.6.13/src/gl/intprops.h.3~ gnutls-3.6.13/src/gl/intprops.h
--- gnutls-3.6.13/src/gl/intprops.h.3~	2020-05-02 19:29:38.644954190 +0200
+++ gnutls-3.6.13/src/gl/intprops.h	2020-05-02 19:34:26.722149693 +0200
@@ -240,7 +240,7 @@
 
 /* True if __builtin_add_overflow_p (A, B, C) works, and similarly for
    __builtin_mul_overflow_p and __builtin_mul_overflow_p.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
+#define _GL_HAS_BUILTIN_OVERFLOW_P ((7 <= __GNUC__) && !defined(__clang__))
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
diff -up gnutls-3.6.13/src/gl/xalloc-oversized.h.3~ gnutls-3.6.13/src/gl/xalloc-oversized.h
--- gnutls-3.6.13/src/gl/xalloc-oversized.h.3~	2020-03-12 21:14:20.000000000 +0100
+++ gnutls-3.6.13/src/gl/xalloc-oversized.h	2020-05-02 19:29:38.644954190 +0200
@@ -41,7 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#if 7 <= __GNUC__ && !defined(__clang__)
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
